#!/usr/bin/env python3
"""Generate intermediate YAML representation of Employees."""
import argparse
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), "../../"))

from orggraph.employees import Employees  # noqa: E402
from yaml import dump, Dumper  # noqa: E402


def set_to_node(node_type, sets):
    nodes = {}
    node_type = node_type.title()

    for value in sets:
        nodes[value] = {}
        nodes[value]["node_type"] = node_type
   
    return nodes


def main(args):
    """Load the Employee YAML and convert it into the Node/Relationship loading format."""
    employees = Employees(args.source)

    nodes = { "employee": {}, "team": set(), "job": set(), "department": set()}
    relationships = []

    for employee in employees.employees():
        details = {}
        details["node_type"] = "Employee"
        details["properties"] = {}
        details["properties"]["name"] = employee.name
        details["properties"]["employee_id"] = employee.employee_id


# TODO
#        if employee.aliases:
#            details["properties"]["aliases"] = employee.aliases

        nodes["employee"][employee.employee_id] = details

        for team in employee.teams:
            relationships.append({
                "relationship_type": "in_team",
                "source_node": f"Employee=={employee.name}",
                "destination_node": f"Team=={team}",
            })

            # Create an empty node just for linking
            nodes["team"].add(team)

        # Create a bare job node and add the Job relationship
        details["properties"]["job_title"] = employee.job_title
        nodes["job"].add(employee.job_title)

        relationships.append({
            "relationship_type": "is a",
            "source_node": f"Employee=={employee.name}",
            "destination_node": f"Job=={employee.job_title}",
        })

        # Create a bare Department node and add the relationship
        details["properties"]["department"] = employee.department
        nodes["department"].add(employee.department)

        relationships.append({
            "relationship_type": "member of",
            "source_node": f"Employee=={employee.name}",
            "destination_node": f"Department=={employee.department}",
        })

        # Add all management relationships
        for report in employee.manages:
            relationships.append({
                "relationship_type": "manages",
                "source_node": f"Employee=={employee.name}",
                # TODO Move this to staff ID once we have 2 people with the same name
                "destination_node": f"Employee=={report}",
            })

        for team in employee.tech_leads:
            relationships.append({
                "relationship_type": "tech_lead",
                "source_node": f"Employee=={employee.name}",
                # TODO Move this to staff ID once we have 2 people with the same name
                "destination_node": f"Team=={team}",
            })
        

    for node_type in nodes:
        if isinstance(nodes[node_type], set):
            nodes[node_type] = set_to_node(node_type.title(), nodes[node_type])

    collected_nodes = {}
    for key in nodes:
        collected_nodes.update(nodes[key])

    with open(args.output, "w") as file:
        file.write(dump({"nodes": collected_nodes, "relationships": relationships}, Dumper=Dumper))


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Load YAML based nodes and relationships into the OrgGraph"
    )

    parser.add_argument(
        "--source",
        type=str,
        default="data/staff-hash.yaml",
        help="File containing the YAML source data",
    )

    parser.add_argument(
        "--output",
        type=str,
        default="generated-data/employees.yaml",
        help="The file to write output to",
    )

    args = parser.parse_args()

    main(args)
